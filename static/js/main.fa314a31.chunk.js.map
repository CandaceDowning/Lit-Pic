{"version":3,"sources":["Components/Colors/Colors.js","Components/PegBoard/PegBoard.js","Components/Controls/Controls.js","Components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Colors","props","react_default","a","createElement","className","onClick","colorSelect","PegBoard","_this","this","board","holes","map","color","i","getGlow","light","key","id","punch","Component","Controls","on","onOrOff","reset","Main","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getInitialState","currentColor","Array","fill","colors","state","splice","setState","Components_Colors_Colors","Components_PegBoard_PegBoard","Components_Controls_Controls","App","Components_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa314a31.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//returns a 'tray' of colors to select from\r\nconst Colors = props => {\r\n  return (\r\n    <div className='colors-main'>\r\n      <div className='directions'>\r\n        <h3>Lit-Pic</h3>\r\n        <p>Click a color!</p>\r\n        <p>Pick a spot!</p>\r\n        <p>Flip the light!</p>\r\n        <p>Make a pic!</p>\r\n      </div>\r\n      <div className='colors-box'>\r\n        <div onClick={() => props.colorSelect(\"w\")} className='w-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"r\")} className='r-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"o\")} className='o-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"y\")} className='y-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"gn\")} className='gn-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"b\")} className='b-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"p\")} className='p-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"pi\")} className='pi-peg peg' />\r\n        <div onClick={() => props.colorSelect(\"g\")} className='g-peg peg'>\r\n          Eraser\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Colors;\r\n","import React, { Component } from \"react\";\r\n\r\nclass PegBoard extends Component {\r\n  render() {\r\n    let board = this.props.holes.map((color, i) => {\r\n      const getGlow = color !== \"g\" && this.props.light === true ? \"on\" : \"off\";\r\n      return (\r\n        <div key={i} className='hole-border'>\r\n          <div\r\n            className={getGlow}\r\n            id={color}\r\n            onClick={() => this.props.punch(i)}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div className='peg-board'>\r\n        <div className='grid'>{board}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PegBoard;\r\n","import React from \"react\";\r\n\r\n//returns a 'tray' of colors to select from\r\nconst Controls = props => {\r\n  const on = props.light ? \"lightOn light-switch\" : \"lightOff light-switch\";\r\n  return (\r\n    <div className='controls-main'>\r\n      <div className='btn-box'>\r\n        <div>\r\n          <p>On/Off</p>\r\n          <button onClick={props.onOrOff} className={on}>\r\n            <div className='flipper' />\r\n            {/* {props.light ? \"OFF\" : \"ON\"} */}\r\n          </button>\r\n        </div>\r\n\r\n        <button onClick={() => props.reset()} className='reset'>\r\n          RESET\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React, { Component } from \"react\";\r\nimport Colors from \"../Colors/Colors\";\r\nimport PegBoard from \"../PegBoard/PegBoard\";\r\nimport Controls from \"../Controls/Controls\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //current color tracked here\r\n    //array holds the color of the holes\r\n    this.state = this.getInitialState();\r\n  }\r\n\r\n  getInitialState = () => {\r\n    let holeGen = Array(900).fill(\"g\");\r\n    const initialState = {\r\n      onOrOff: false,\r\n      currentColor: \"g\",\r\n      holes: holeGen,\r\n      light: false\r\n    };\r\n    return initialState;\r\n  };\r\n\r\n  //Lite Brite had pegs that you would punch through a paper template, so this function 'punches' the 'pegs' into place\r\n  punch = i => {\r\n    let colors = this.state.holes;\r\n    colors.splice(i, 1, this.state.currentColor);\r\n    this.setState({ holes: colors });\r\n  };\r\n\r\n  //sets color clicked to the current color for punching into the peg board\r\n  colorSelect = color => {\r\n    this.setState({ currentColor: color });\r\n  };\r\n\r\n  //turns the 'light' on and off which modifies the selector to include a box shadow and lightens the color of the 'pegs'\r\n  onOrOff = () => {\r\n    this.setState({ light: !this.state.light });\r\n  };\r\n\r\n  //resets the array to all gray\r\n  reset = () => {\r\n    this.setState(this.getInitialState());\r\n  };\r\n\r\n  // pointerChange = () => {\r\n  //   document.body.style.cursor = \"pointer\";\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div className='main'>\r\n        <div className='pegs-btns'>\r\n          <Colors colorSelect={this.colorSelect} />\r\n        </div>\r\n        <PegBoard\r\n          holes={this.state.holes}\r\n          light={this.state.light}\r\n          punch={this.punch}\r\n        />\r\n        <Controls\r\n          reset={this.reset}\r\n          onOrOff={this.onOrOff}\r\n          light={this.state.light}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Main from \"./Components/Main/Main\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}